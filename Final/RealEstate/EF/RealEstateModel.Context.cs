

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace RealEstate.EF
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class RealEstateEntities : DbContext
{
    public RealEstateEntities()
        : base("name=RealEstateEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Property> Properties { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<User> Users { get; set; }


    public virtual int CreateProperty(string propertyName, string description, Nullable<int> rooms, Nullable<double> size, Nullable<int> floors, string country, string city, Nullable<int> categoryId, Nullable<int> agentId)
    {

        var propertyNameParameter = propertyName != null ?
            new ObjectParameter("PropertyName", propertyName) :
            new ObjectParameter("PropertyName", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var roomsParameter = rooms.HasValue ?
            new ObjectParameter("Rooms", rooms) :
            new ObjectParameter("Rooms", typeof(int));


        var sizeParameter = size.HasValue ?
            new ObjectParameter("Size", size) :
            new ObjectParameter("Size", typeof(double));


        var floorsParameter = floors.HasValue ?
            new ObjectParameter("Floors", floors) :
            new ObjectParameter("Floors", typeof(int));


        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var categoryIdParameter = categoryId.HasValue ?
            new ObjectParameter("CategoryId", categoryId) :
            new ObjectParameter("CategoryId", typeof(int));


        var agentIdParameter = agentId.HasValue ?
            new ObjectParameter("AgentId", agentId) :
            new ObjectParameter("AgentId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateProperty", propertyNameParameter, descriptionParameter, roomsParameter, sizeParameter, floorsParameter, countryParameter, cityParameter, categoryIdParameter, agentIdParameter);
    }


    public virtual int RegisterUser(string firstName, string lastName, string email, string password, Nullable<int> roleId, string country, string city)
    {

        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterUser", firstNameParameter, lastNameParameter, emailParameter, passwordParameter, roleIdParameter, countryParameter, cityParameter);
    }

}

}

